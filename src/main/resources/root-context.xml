<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
							
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- 데이터베이스 접속에 관련된 클래스들을 bean으로 등록 -->
	
	<!-- sqlSessionTemplate등록 -->
	<!-- new SqlsessionTemplate(sqlSession);과 같은 의미 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"/>
	</bean>
	<!-- setter를 통한 의존성 주입 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- DB접속 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> <!-- destroy-method는 사용 후 close하라 -->
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:xe"/>
		<property name="username" value="enjoin"/>
		<property name="password" value="enjoin"/>
		<property name="defaultAutoCommit" value="false"/>
	</bean>
	<!-- BasicDataSource dataSource = new BasicDataSource();
		 SqlSessionFactoryBean sqlSession = new SqlSessionFactoryBean();
		 sqlSessionsetConfigLocation("classpath:mybatis-config.xml");
		 sqlSession.setDataSource(dataSource);
		 
		 SqlSessionTemplate sqlSessionTemplate = new SqlSessionTemplate(sqlSession);-->
		 
	<!-- 트랜젝션 매니저 bean등록 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 어노테이션으로 트랜젝션 매니저를 설정하기 위해 추가해야하는 설정 -->
	<tx:annotation-driven transaction-manager="transactionManager"/> <!-- aop등록되면 왼쪽에 화살표가 생성됨 -->
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" rollback-for="Exception"/>
			<tx:method name="insert*" rollback-for="Exception" propagation="REQUIRED" isolation="SERIALIZABLE"/>
			<tx:method name="update*" rollback-for="Exception" propagation="REQUIRED" isolation="SERIALIZABLE"/>
			<tx:method name="delete*" rollback-for="Exception" propagation="REQUIRED" isolation="SERIALIZABLE"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- AOP를 이용하여 위의 txAdvice를 적용시키기 위한 내용 -->
	<!-- advice객체가 weaving될 시점(pointcut을 등록하는 것임) -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="serviceMethod" expression="execution(* com.finalProject.enjoin..*ServiceImpl.*(..))"/>
		<aop:advisor id="transacionAdvisor" pointcut-ref="serviceMethod" advice-ref="txAdvice"/>
	</aop:config>
	
	<!-- 파일업로드에 필요한 bean -->    
    <bean id="mulitpartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <!-- 파일업로드 용량 -->
    <property name="maxUploadSize" value="10485760"/>
	</bean>
	<!-- 파일업로드를 위한 디렉토리 설정 -->
	<!-- String uploadPath = new String("업로드 경로") -->
	<bean id="uploadPath" class="java.lang.String">
    <!-- 파일업로드 디렉토리-->
    <constructor-arg value="해당디렉토리"/>
  </bean>

  
	
</beans>














